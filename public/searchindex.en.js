var relearn_searchindex = [
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "Introduction to AWS Cloud Objectives By the end of this page, you will be able to:\nUnderstand what AWS Cloud is and its evolution Describe AWS‚Äôs global infrastructure including Regions and Availability Zones Identify core AWS services and their benefits Recognize common use cases for AWS Cloud Differentiate AWS from other cloud providers Get started with AWS and understand basic terminology Learn about AWS account structure, support plans, and foundational concepts Understand the AWS Well-Architected Framework and its five pillars Perform basic AWS tasks including managing EC2 instances and configuring security 0.1 What is AWS Cloud? AWS Cloud is a comprehensive and widely adopted cloud platform offered by Amazon, providing on-demand computing resources and services such as storage, databases, analytics, and networking over the internet. 0.2 History and Evolution of AWS AWS was launched in 2006 as one of the first cloud service providers. It has rapidly evolved from simple infrastructure services to a vast ecosystem of scalable, secure, and flexible cloud solutions used globally. 0.3 AWS Global Infrastructure AWS‚Äôs global infrastructure consists of data centers grouped into Regions and Availability Zones (AZs), strategically located worldwide to provide high availability, fault tolerance, and low latency. 0.4 Core AWS Services Core AWS services include: EC2 (Elastic Compute Cloud) for virtual servers S3 (Simple Storage Service) for scalable storage RDS (Relational Database Service) for managed databases Lambda for serverless computing And many more‚Ä¶ 0.5 Benefits of AWS Cloud AWS offers benefits such as: Cost efficiency through pay-as-you-go pricing Scalability to handle varying workloads Robust security features Global presence for high availability and performance 0.6 Use Cases for AWS Cloud AWS supports use cases like: Hosting websites and applications Big data analytics Disaster recovery IoT applications Machine learning workloads 0.7 How AWS Differs from Other Cloud Providers AWS stands out due to: Early market entry and maturity Extensive service portfolio Global reach with many regions and AZs Strong security and compliance Large ecosystem of partners and customers 0.8 Getting Started with AWS To get started: Create an AWS account Explore the AWS Management Console Use the AWS Free Tier to experiment Follow AWS documentation and tutorials 0.9 Common AWS Terminology Region: Geographical area with multiple data centers Availability Zone (AZ): Isolated data center within a region Instance: Virtual server running on EC2 Bucket: Storage container in S3 IAM: Identity and Access Management for permissions AWS Account and Infrastructure Overview Learn about the basic building blocks of the AWS ecosystem.\nAWS Account Your AWS Account is your unique identity in AWS, managing your resources, billing, and permissions. Supports multiple users through IAM. Can be grouped into Organizations to manage multiple accounts. AWS Regions Geographically isolated locations designed for fault tolerance and low latency. Examples: us-east-1 (N. Virginia), eu-west-1 (Ireland), ap-south-1 (Mumbai). Availability Zones (AZs) Physically separate data centers within a region. Connected with low-latency links for high availability. Distribute resources across AZs to increase fault tolerance. Edge Locations Part of AWS‚Äôs Content Delivery Network (CDN). Cache and deliver content globally via Amazon CloudFront. Reduce latency and improve user experience. AWS Support Plans Plan Description Basic Free, includes customer service and documentation Developer Business hours email support Business 24/7 phone, chat, and email support Enterprise Dedicated Technical Account Manager and Concierge Assignments Create your AWS Account Explore the AWS Management Console Launch and manage EC2 instances: Create, start, and stop instances Connect via SSH using key pairs Modify or replace SSH keys if needed Check the ec2 instance terminate protection and stop Protection. Add a role to instance Change the Instance Type Add a new Disk Create an AMI Learn about default users in various AWS AMIs Use AWS CloudShell for command-line access without setup Install AWS CLI and configure credentials: Test AWS CLI commands for various services Practice configuring Security Groups by opening and blocking ports to control traffic",
    "description": "Introduction to AWS Cloud Objectives By the end of this page, you will be able to:\nUnderstand what AWS Cloud is and its evolution Describe AWS‚Äôs global infrastructure including Regions and Availability Zones Identify core AWS services and their benefits Recognize common use cases for AWS Cloud Differentiate AWS from other cloud providers Get started with AWS and understand basic terminology Learn about AWS account structure, support plans, and foundational concepts Understand the AWS Well-Architected Framework and its five pillars Perform basic AWS tasks including managing EC2 instances and configuring security 0.1 What is AWS Cloud? AWS Cloud is a comprehensive and widely adopted cloud platform offered by Amazon, providing on-demand computing resources and services such as storage, databases, analytics, and networking over the internet. 0.2 History and Evolution of AWS AWS was launched in 2006 as one of the first cloud service providers. It has rapidly evolved from simple infrastructure services to a vast ecosystem of scalable, secure, and flexible cloud solutions used globally. 0.3 AWS Global Infrastructure AWS‚Äôs global infrastructure consists of data centers grouped into Regions and Availability Zones (AZs), strategically located worldwide to provide high availability, fault tolerance, and low latency. 0.4 Core AWS Services Core AWS services include: EC2 (Elastic Compute Cloud) for virtual servers S3 (Simple Storage Service) for scalable storage RDS (Relational Database Service) for managed databases Lambda for serverless computing And many more‚Ä¶ 0.5 Benefits of AWS Cloud AWS offers benefits such as: Cost efficiency through pay-as-you-go pricing Scalability to handle varying workloads Robust security features Global presence for high availability and performance 0.6 Use Cases for AWS Cloud AWS supports use cases like: Hosting websites and applications Big data analytics Disaster recovery IoT applications Machine learning workloads 0.7 How AWS Differs from Other Cloud Providers AWS stands out due to: Early market entry and maturity Extensive service portfolio Global reach with many regions and AZs Strong security and compliance Large ecosystem of partners and customers 0.8 Getting Started with AWS To get started: Create an AWS account Explore the AWS Management Console Use the AWS Free Tier to experiment Follow AWS documentation and tutorials 0.9 Common AWS Terminology Region: Geographical area with multiple data centers Availability Zone (AZ): Isolated data center within a region Instance: Virtual server running on EC2 Bucket: Storage container in S3 IAM: Identity and Access Management for permissions AWS Account and Infrastructure Overview Learn about the basic building blocks of the AWS ecosystem.",
    "tags": [],
    "title": "Part 01: Introduction to AWS Cloud",
    "uri": "/part0/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "Objectives [Understand the fundamentals of AWS IAM and its components] Learn how to manage users, groups, roles, and permissions securely Implement best practices for access control and identity federation Configure permissions for services like EC2. üìö AWS IAM (Identity and Access Management) AWS IAM is a web service that helps you securely control access to AWS services and resources for your users.\n‚úÖ What is AWS IAM? AWS Identity and Access Management (IAM) enables you to:\nManage users and their permissions to access AWS resources. Grant fine-grained access using policies. Enhance security by applying best practices like least privilege and multi-factor authentication (MFA). Control authentication and authorization across accounts and services. ‚úÖ Key Components of IAM 1. Users Represents individual people or services accessing AWS. Each user can have their own credentials (password, access keys). 2. Groups A collection of IAM users. Apply permissions collectively rather than individually. 3. Roles Assign permissions to AWS resources without creating long-term credentials. Used by applications, services, or federated users. 4. Policies JSON documents that define permissions. Specify allowed or denied actions, resources, and conditions. ‚úÖ IAM Policies Example of a simple policy: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"s3:ListBucket\", \"Resource\": \"arn:aws:s3:::example-bucket\" } ] }\rManaging IAM Resources ‚úÖ Adding a User Navigate to the IAM console Click ‚ÄúUsers‚Äù ‚Üí ‚ÄúAdd user‚Äù Enter username, select access type (programmatic or console) Attach existing policies or create custom ones Add user to groups if needed Review and create ‚úÖ Adding a Group Navigate to the IAM console Click ‚ÄúGroups‚Äù ‚Üí ‚ÄúCreate group‚Äù Enter group name Attach policies (managed or custom) Add users to the group Review and create ‚úÖ Attaching Policies to Users or Groups Use AWS Managed Policies or create Customer Managed Policies Assign permissions based on roles or business requirements Example: Attach AmazonEC2FullAccess to developers managing instances ‚úÖ Creating and Using Roles Navigate to ‚ÄúRoles‚Äù ‚Üí ‚ÄúCreate role‚Äù Select trusted entity type (AWS service, another account, or web identity) Attach permissions policies Review and create Assign role to EC2, Lambda, or external service ‚úÖ Test by Attaching the Role to an EC2 Instance Navigate to EC2 ‚Üí Instances ‚Üí Launch Instance Configure the instance by selecting an AMI and instance type In Configure Instance Details, under IAM role, select the role you created Complete the rest of the instance setup and launch it Connect to the instance using SSH and verify the role is attached by running: curl http://169.254.169.254/latest/meta-data/iam/info or aws s3 ls\r‚úÖ AWS IAM ‚Äì Assume Role üìå What is Assume Role? Assume Role is an AWS feature that allows a user, application, or service to temporarily acquire permissions defined by a role without needing permanent credentials.\nThis is useful for:\n‚úî Granting limited-time access to resources\n‚úî Cross-account access\n‚úî Secure access for applications running on AWS\n‚úî Federation with external identities\n‚úÖ Key Concepts ‚úÖ Role An IAM entity with permissions attached. Does not have its own long-term credentials like users. ‚úÖ Assume Role A process where an entity temporarily takes on the permissions of a role. Uses AWS Security Token Service (STS) to request temporary credentials. ‚úÖ Trust Policy Defines which entities are allowed to assume the role. ‚úÖ Session A temporary environment where permissions are valid. Credentials expire after a set time. ‚úÖ How Assume Role Works An entity (user, service, application) requests to assume a role. AWS verifies the request based on the trust policy. AWS issues temporary security credentials (access key, secret key, and session token). The entity uses these credentials to access AWS resources. ‚úÖ Example Trust Policy This policy allows the user Alice to assume the role:\n{ \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::123456789012:user/Alice\" }, \"Action\": \"sts:AssumeRole\" } ] }\rLabs: ‚úÖ Creating and Using Roles Navigate IAM ‚Üí Roles ‚Üí Create Role Select trusted entity type: AWS service, another account, or web identity Attach permissions policies based on role requirements Review and create the role Assign role to EC2, Lambda, or external service ‚úÖ Assuming a Role Use temporary credentials via STS to assume a role Example CLI command: aws sts assume-role \\ --role-arn \"arn:aws:iam::\u003caccount-id\u003e:role/\u003crole-name\u003e\" \\ --role-session-name \"SessionName\"\r‚úÖ Testing an Assumed Role from AWS Console Sign in to the AWS Management Console using your IAM user credentials.\nSwitch Role:\nClick on your username (top-right corner) ‚Üí Switch Role Enter the Account ID and Role Name of the role you want to assume Optionally, add a Display Name and Color for easier identification Click Switch Role Verify Role Permissions:\nOnce switched, you‚Äôll see the new role‚Äôs name in the console header Try accessing resources allowed by the role (e.g., list S3 buckets, launch EC2) If actions succeed, the role is working correctly If you see ‚ÄúAccess Denied,‚Äù the role‚Äôs permissions or trust policy may need adjustment Switch Back:\nClick on the role name (top-right) ‚Üí Back to your original user Legacy Approach: Single AWS Account Before multi-account strategies became popular, many organizations used a single AWS account for all workloads, environments, and teams.\nChallenges of the Legacy Approach: Security risks: Lack of isolation increases blast radius if credentials are compromised. Billing confusion: Difficult to track costs per project, environment, or team. Resource limits: AWS service quotas apply per account, limiting scalability. Complex permissions: Managing IAM policies for diverse teams and environments becomes complicated. Operational risks: Accidental resource changes can impact production workloads. AWS Multi-Account Strategy Managing multiple AWS accounts is a best practice for organizations looking to improve security, billing, and resource isolation. The AWS Multi-Account Strategy helps you organize your cloud environment efficiently.\nWhy Use Multiple AWS Accounts? Isolation of workloads: Separate development, testing, and production environments. Security boundaries: Limit blast radius if one account is compromised. Billing clarity: Track costs by team, project, or environment. Simplified compliance: Enforce policies and audits more easily. Resource limits: Avoid hitting AWS service limits by distributing resources across accounts. Key Components of a Multi-Account Strategy AWS Organizations Centralized management of multiple AWS accounts. Use Service Control Policies (SCPs) to set permission guardrails. Consolidated billing for all linked accounts. Automated account creation and lifecycle management. Account Structure Models 1. Environment-Based Account Name Purpose Prod Production workloads Dev Development environment Test Testing and QA 2. Business Unit-Based Account Name Purpose Marketing Marketing projects Finance Financial systems Engineering Engineering projects 3. Application-Based Account Name Purpose App-A Application A workloads App-B Application B workloads Best Practices Centralize logging and monitoring: Use AWS CloudTrail and AWS Config aggregated in a dedicated account. Use cross-account roles: Enable secure access between accounts. Automate account provisioning: Use AWS Control Tower or custom automation. Implement guardrails: Apply SCPs to enforce security policies. Tag consistently: Use tags for cost allocation and resource management. Visual Overview AWS Organizations ‚îÇ ‚îú‚îÄ‚îÄ Security Account (centralized logging, monitoring) ‚îú‚îÄ‚îÄ Shared Services Account (DNS, directory services) ‚îú‚îÄ‚îÄ Prod Account(s) ‚îú‚îÄ‚îÄ Dev Account(s) ‚îî‚îÄ‚îÄ Test Account(s)\rKey Points to Remember: AWS Multi-Account Architectures For multi-AWS account architectures, you must be familiar with cross-account AWS service-specific configurations and services that enable organizations to maintain centralized access.\nServices / Configurations Descriptions AWS Organizations Centralized account management, policy enforcement, consolidated billing IAM Identity Center Centralized user authentication and access management AWS Security Hub Centralized security posture management Cross-Account Configurations CloudTrail, Config, GuardDuty, CloudWatch These services and configurations help enforce security, manage access, and centralize monitoring across multiple AWS accounts.\n‚úÖ AWS Organizations üìå What is AWS Organizations? AWS Organizations is a service that helps you centrally manage and govern multiple AWS accounts.\nIt allows you to group accounts, apply policies, and simplify billing across your organization.\nKey benefits:\nCentralized management of multiple AWS accounts Apply Service Control Policies (SCPs) for governance Consolidated billing and cost tracking Simplified account creation and organization ‚úÖ Key Concepts 1. Organization The top-level entity that contains all your AWS accounts and OUs. 2. Accounts Individual AWS accounts within your organization. Can be master/management account or member accounts. 3. Organizational Units (OUs) Logical grouping of accounts within the organization. SCPs can be applied at the OU level for consistent governance. 4. Service Control Policies (SCPs) Policies that define what actions accounts in your organization can or cannot perform. SCPs restrict permissions, but do not grant them. 5. Master / Management Account The account that creates the organization and manages billing, OUs, and policies. ‚úÖ Features Account Management: Create, invite, and manage accounts from a single place. Centralized Billing: Consolidate billing for all accounts into a single payment method. Policy-Based Management: Apply SCPs to OUs and accounts to enforce governance. Automation: Use AWS Control Tower or CLI for managing multiple accounts. ‚úÖ Steps to Create an AWS Organization Step 1: Sign in as the Master Account Use the root account or IAM user with admin privileges. Step 2: Create the Organization Go to AWS Organizations console ‚Üí C ‚úÖ AWS SCP (Service Control Policies) üìå What is SCP? Service Control Policies (SCPs) are a feature of AWS Organizations that allow you to control what services and actions accounts in your organization can access.\nSCPs do not grant permissions; they only restrict or allow actions for accounts under an Organizational Unit (OU).\n‚úÖ Key Concepts Root: Top-level container in an AWS Organization. SCPs attached here apply to all accounts. Organizational Unit (OU): A container for accounts. SCPs attached to an OU apply to all member accounts. Policy types: Allow list: Only actions listed are allowed. Deny list: Actions listed are explicitly denied. Effect: Allow or Deny. Deny overrides any Allow permission from IAM policies. ‚úÖ Steps to Create and Attach SCP Step 1: Enable AWS Organizations Login as root user or account with permissions. Go to AWS Organizations console. Create an organization if not already done. Step 2: Create a Service Control Policy Go to Policies ‚Üí Create policy. Choose JSON or Visual editor. Example JSON for denying S3 deletion: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Deny\", \"Action\": \"s3:DeleteBucket\", \"Resource\": \"*\" } ] }\r‚úÖ AWS Organizations and SCP (Service Control Policies) AWS Organizations helps you centrally manage multiple AWS accounts SCPs are used to set permission guardrails across accounts in the organization SCPs do not grant permissions, they limit permissions that IAM roles or users can have ‚úÖ Using SCPs Navigate AWS Organizations ‚Üí Policies ‚Üí Create Policy Define allowed or denied actions using JSON, e.g.: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Deny\", \"Action\": \"s3:DeleteBucket\", \"Resource\": \"*\" } ] }\rTag Policies Assignmnets: ‚úÖ 10 Tasks Related to AWS IAM Users These tasks are commonly performed when managing IAM Users in AWS.\n1. Create a new IAM user Add a user with a name and specify programmatic or console access. 2. Assign permissions to a user Attach managed or inline policies to grant necessary permissions. 3. Add a user to a group Place users into groups to inherit shared permissions. 4. Enable Multi-Factor Authentication (MFA) Secure the user‚Äôs AWS account by enabling MFA. 5. Generate access keys for the user Create programmatic access credentials for CLI or SDK use. 6. Rotate the user‚Äôs access keys Replace old keys with new ones to enhance security. 7. Set password policies Enforce password length, complexity, and expiration rules for users. 8. Attach policies using least privilege principle Grant only required permissions rather than full access. 9. Monitor user activity Use AWS CloudTrail or IAM Access Analyzer to review actions performed by users. 10. Remove unused or inactive users Identify and delete users that are no longer required or inactive. AWS Identity Center Objective Understand what AWS Identity Center is. Learn how to configure and use it for secure workforce access. Explore its integration with AWS Organizations, IAM, and external identity providers. What is AWS Identity Center? AWS Identity Center is a centralized service that enables you to manage user identities and permissions across multiple AWS accounts and applications. It simplifies single sign-on (SSO) access to AWS Management Console, CLI, and supported third-party SaaS apps.\nIt replaces the older AWS SSO service and integrates deeply with AWS Organizations.\nKey Features üîê Centralized identity and access management for AWS and applications ‚úÖ SSO access to AWS accounts and roles üåê Integration with identity providers (Microsoft AD, Okta, Azure AD, etc.) üìÅ Directory options: AWS Managed Directory, AD Connector, or External IdP üìú Assign fine-grained permissions via permission sets üîÑ Automatically sync users/groups from external IdPs How It Works Create users and groups in AWS Identity Center or sync from an identity provider. Assign users/groups to AWS accounts and roles via permission sets. Users log in through a custom portal URL (e.g., https://d-abc123.awsapps.com/start). Users gain SSO access to AWS services, CLI, or external applications. Directory Options AWS Identity Center Directory (default): Manage users directly in AWS. AWS Managed Microsoft AD: Connect to your self-managed Active Directory. AD Connector: Proxy to your on-premises AD. External Identity Provider: Integrate via SAML 2.0 (Okta, Azure AD, etc.) Use Cases Centralized user access across 100s of AWS accounts Enabling secure workforce SSO with minimal friction Simplifying permission management for non-technical teams Integrating corporate identity systems with AWS Steps to Set Up Enable AWS Identity Center in the AWS console. Choose or connect a directory source. Add or sync users and groups. Create and assign permission sets (based on IAM policies). Assign users/groups to AWS accounts. Share the SSO login portal URL with users. CLI Access with Identity Center You can configure CLI access using:\naws configure sso\rBenefits Over IAM-Only Setup IAM Roles/Users AWS Identity Center Manual per-user setup Centralized and scalable Hard to manage at scale Supports user/group mapping Password-based access SSO + MFA support No user sync Sync with corporate IdPs",
    "description": "Objectives [Understand the fundamentals of AWS IAM and its components] Learn how to manage users, groups, roles, and permissions securely Implement best practices for access control and identity federation Configure permissions for services like EC2. üìö AWS IAM (Identity and Access Management) AWS IAM is a web service that helps you securely control access to AWS services and resources for your users.\n‚úÖ What is AWS IAM? AWS Identity and Access Management (IAM) enables you to:",
    "tags": [],
    "title": "Part 02: IAM ",
    "uri": "/02/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "Objective Understand the purpose and features of AWS EC2. Learn how to launch, configure, and manage EC2 instances. Explore different EC2 instance types and their use cases. Understand Elastic IPs and Security Groups for networking and security. Learn how to implement Auto Scaling to manage instance availability and cost. Discover other important EC2 features like EBS, Placement Groups, Spot Instances, and more. 2.1 Introduction to EC2 Amazon Elastic Compute Cloud (EC2) is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale cloud computing easier for developers by allowing you to launch and manage virtual servers called instances. EC2 provides secure, scalable computing capacity and supports various operating systems.\nKey Features:\nScalable compute capacity Multiple instance types optimized for different workloads Flexible cloud hosting services Pay-as-you-go pricing model Integration with other AWS services 2.2 Launching EC2 Instances Launching an EC2 instance involves the following steps:\nSign in to the AWS Management Console Navigate to the EC2 Dashboard Click Launch Instance AMI (Amazon Machine Image) A preconfigured template that contains the operating system, application server, and applications. Provides the information required to launch an instance. You can choose from public AMIs, AWS Marketplace AMIs, or create your own custom AMIs. Instance Type Defines the hardware configuration of the instance (CPU, memory, storage, networking). Choose based on your workload requirements. Placement Select the Availability Zone to specify where your instance will physically run within a region. You can also choose Placement Groups for optimized network performance or to meet regulatory requirements. SSH Key Pair Key pairs are used for secure login to your instances. When launching an instance, you specify an SSH key pair; the private key is used to securely connect to the instance. AWS does not store your private key ‚Äî you must keep it safe. Proximity (Placement Groups) Placement Groups control how instances are placed on underlying hardware. Types of placement groups: Cluster: Packs instances close together for low-latency network performance. Spread: Distributes instances across distinct hardware to reduce correlated failures. Partition: Divides instances into logical partitions to isolate failure domains. Debugging Options Enable detailed monitoring for performance metrics. Use System Logs and Instance Console Output for troubleshooting boot or OS issues. Use CloudWatch Logs and CloudTrail to track and audit instance activity. Configure IAM Roles to securely access AWS services from the instance. Additional Steps: Configure Instance Details ‚Äî network settings, IAM role, shutdown behavior Add Storage ‚Äî attach EBS volumes Add Tags ‚Äî optional metadata for organizing resources Configure Security Group ‚Äî firewall settings controlling inbound/outbound traffic Review and Launch ‚Äî confirm settings and launch instance Connect to your instance using SSH (Linux) or RDP (Windows) 2.3 EC2 Instance Types EC2 provides a variety of instance types tailored to different use cases. Instances are grouped into families based on their capabilities:\nGeneral Purpose: Balanced CPU, memory, and networking (e.g., t3, m5) Compute Optimized: High CPU for compute-intensive applications (e.g., c5, c6g) Memory Optimized: High memory for in-memory databases (e.g., r5, x1) Storage Optimized: High disk throughput and IOPS (e.g., i3, d2) GPU Instances: For machine learning and graphics applications (e.g., p3, g4) Choosing the right instance depends on your workload requirements and budget.\n2.4 Elastic IP and Security Groups Elastic IP An Elastic IP address is a static, public IPv4 address designed for dynamic cloud computing. It allows you to mask instance failures by quickly remapping the address to another instance.\nIt is associated with your AWS account, not a specific instance. Useful for applications requiring a fixed IP address. You can associate or disassociate Elastic IPs as needed. Security Groups Security Groups act as virtual firewalls that control inbound and outbound traffic for your instances.\nYou define rules to allow specific IP addresses or ranges on certain ports. By default, inbound traffic is blocked and outbound traffic is allowed. Security groups are stateful ‚Äî if inbound traffic is allowed, the response outbound traffic is automatically allowed. You can assign multiple security groups to an instance. 2.5 EC2 Auto Scaling EC2 Auto Scaling helps maintain application availability by automatically adjusting the number of instances.\nAuto Scaling Groups: Define a collection of EC2 instances treated as a logical group for scaling and management. Scaling Policies: Automatically increase or decrease instance count based on metrics like CPU utilization. Ensures that you have the right number of instances to handle load. Helps reduce costs by scaling down when demand is low. Supports health checks to replace unhealthy instances automatically. Other Important AWS EC2 Features Elastic Block Store (EBS)\nPersistent block storage volumes that you can attach to your EC2 instances for data storage. Supports snapshots and resizing.\nElastic Load Balancing (ELB)\nAutomatically distributes incoming traffic across multiple EC2 instances to improve fault tolerance and scalability.\nInstance Store (Ephemeral Storage)\nTemporary block-level storage physically attached to the host computer, ideal for temporary data.\nInstance Metadata and User Data\nProvides instance-specific information and allows bootstrapping via user data scripts (cloud-init).\nElastic IP Addresses\nStatic public IPs that you can associate with your instances to maintain fixed IP addresses.\nSecurity Groups\nVirtual firewalls controlling inbound and outbound traffic at the instance level.\nNetwork Interfaces (ENIs)\nAttach multiple network interfaces to your instance for advanced networking configurations.\nPlacement Groups\nPlacement strategies to optimize latency, throughput, or fault tolerance (cluster, spread, partition).\nAuto Scaling\nAutomatically adjust the number of instances based on demand.\nDedicated Hosts and Instances\nPhysical servers dedicated to your use for compliance and licensing purposes.\nSpot Instances\nUse spare AWS compute capacity at discounted prices, ideal for fault-tolerant and flexible applications.\nHibernation\nPause and resume instances with their RAM contents saved, enabling faster start times.\nInstance Types and Families\nVariety of instance types optimized for compute, memory, storage, or GPU workloads.\nAmazon Machine Images (AMIs)\nCustom or pre-built OS and software configurations used to launch instances quickly.\nEnhanced Networking\nHigher bandwidth, lower latency, and lower jitter network interfaces for EC2 instances.\nTagging\nOrganize and manage instances and related resources using metadata tags.\nAssignments Create an AWS account and access the EC2 dashboard. Launch a Linux EC2 instance using the free-tier eligible AMI. Launch a Windows EC2 instance. Generate and download an SSH key pair. Connect to a Linux instance using SSH. Connect to a Windows instance using RDP. Stop and start an EC2 instance. Reboot an EC2 instance. Terminate an EC2 instance. Create a custom AMI from an existing instance. Launch an EC2 instance using a custom AMI. Attach an Elastic IP to an EC2 instance. Detach an Elastic IP and associate it with another instance. Create and attach an EBS volume to an EC2 instance. Detach and delete an EBS volume. Resize an EBS volume attached to an instance. Take a snapshot of an EBS volume. Restore an EBS volume from a snapshot. Create and manage Security Groups. Add inbound rules to Security Groups to allow SSH, HTTP, and HTTPS. Remove rules from Security Groups. Assign multiple Security Groups to an EC2 instance. Use EC2 user data to automate instance setup with shell scripts. Enable detailed monitoring on an EC2 instance. View CloudWatch metrics for CPU utilization and network traffic. Set up CloudWatch alarms for high CPU usage. Create an IAM role and attach it to an EC2 instance. Use IAM roles to grant EC2 instances permissions to access S3 buckets. Enable and view instance console output and logs. Use EC2 instance metadata to query instance-specific information. Use AWS Systems Manager Session Manager to connect to an EC2 instance without SSH. Create a placement group and launch instances inside it. Launch instances in different Availability Zones for high availability. Set up an Auto Scaling Group with EC2 instances. Create scaling policies for Auto Scaling Groups based on CPU load. Create a launch template for EC2 instances. Update and version a launch template. Use EC2 Spot Instances to reduce costs. Create an Elastic Load Balancer and register EC2 instances. Enable termination protection for an EC2 instance. Modify instance types by stopping and changing instance size. Enable EBS encryption for an existing volume. Use tags to organize EC2 instances. Implement security best practices for EC2 (restrict SSH access, use key pairs). Enable EC2 instance hibernation and test it. Use Amazon EC2 Auto Recovery to automatically recover instances. Enable Enhanced Networking for high-performance network. Create a launch configuration and use it with Auto Scaling. Monitor EC2 instance billing and optimize costs. Backup EC2 instances and data regularly.",
    "description": "Objective Understand the purpose and features of AWS EC2. Learn how to launch, configure, and manage EC2 instances. Explore different EC2 instance types and their use cases. Understand Elastic IPs and Security Groups for networking and security. Learn how to implement Auto Scaling to manage instance availability and cost. Discover other important EC2 features like EBS, Placement Groups, Spot Instances, and more. 2.1 Introduction to EC2 Amazon Elastic Compute Cloud (EC2) is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale cloud computing easier for developers by allowing you to launch and manage virtual servers called instances. EC2 provides secure, scalable computing capacity and supports various operating systems.",
    "tags": [],
    "title": "AWS EC2 (Elastic Compute Cloud)",
    "uri": "/part03/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "3. AWS VPC (Virtual Private Cloud) Objective Understand the purpose and components of a Virtual Private Cloud. Learn how to design and manage networking in AWS using VPC. Explore routing, subnets, gateways, peering, and security best practices. 3.1 Introduction to AWS VPC What is a VPC? Why use a VPC? Benefits of VPC in cloud networking 3.2 VPC Components Overview Subnets (Public vs Private) Route Tables Internet Gateway (IGW) NAT Gateway / NAT Instance Elastic IPs VPC Endpoints DHCP Options Set Network ACLs Security Groups 3.3 Creating a Custom VPC Steps to create a VPC from scratch CIDR block selection and planning Creating subnets in multiple Availability Zones Associating route tables with subnets 3.4 Public and Private Subnets Use cases and design patterns How to create and route traffic for each Testing internet access from different subnets 3.5 Internet Gateway Attaching and detaching IGWs Updating route tables to allow outbound traffic 3.6 NAT Gateway vs NAT Instance Differences and use cases High availability setup Cost and performance comparison 3.7 Route Tables Associating route tables to subnets Custom vs main route tables Routing traffic between subnets and to the internet 3.8 VPC Peering VPC-to-VPC communication Creating and accepting peering connections Limitations and routing configuration 3.9 VPC Endpoints Interface vs Gateway endpoints Connecting privately to AWS services like S3 or DynamoDB Security benefits 3.10 Security in VPC Security Groups vs NACLs Inbound and outbound rules Stateful vs Stateless behavior Best practices for securing subnets and traffic flow 3.11 Elastic IPs and ENIs Allocating and associating Elastic IPs Attaching multiple ENIs (Elastic Network Interfaces) to an instance Use cases for secondary ENIs 3.12 Monitoring and Troubleshooting VPC Flow Logs CloudWatch metrics for networking Troubleshooting connectivity issues 3.13 VPC Design Best Practices Multi-AZ design Least privilege principle in security Using public and private subnets effectively High availability and fault tolerance 3.14 IPv6 Support in VPC Enabling IPv6 in a VPC Dual-stack networking (IPv4 + IPv6) Security considerations with IPv6 3.15 Hybrid Networking (Advanced) VPN connections AWS Direct Connect Transit Gateway overview Hybrid architecture design tips Optional Hands-On Tasks Create a custom VPC with 2 public and 2 private subnets Launch EC2 instances in both subnet types and test internet access Create and test a NAT Gateway Set up a VPC peering connection Use a VPC endpoint to connect to S3 privately Enable VPC Flow Logs and analyze traffic patterns",
    "description": "3. AWS VPC (Virtual Private Cloud) Objective Understand the purpose and components of a Virtual Private Cloud. Learn how to design and manage networking in AWS using VPC. Explore routing, subnets, gateways, peering, and security best practices. 3.1 Introduction to AWS VPC What is a VPC? Why use a VPC? Benefits of VPC in cloud networking 3.2 VPC Components Overview Subnets (Public vs Private) Route Tables Internet Gateway (IGW) NAT Gateway / NAT Instance Elastic IPs VPC Endpoints DHCP Options Set Network ACLs Security Groups 3.3 Creating a Custom VPC Steps to create a VPC from scratch CIDR block selection and planning Creating subnets in multiple Availability Zones Associating route tables with subnets 3.4 Public and Private Subnets Use cases and design patterns How to create and route traffic for each Testing internet access from different subnets 3.5 Internet Gateway Attaching and detaching IGWs Updating route tables to allow outbound traffic 3.6 NAT Gateway vs NAT Instance Differences and use cases High availability setup Cost and performance comparison 3.7 Route Tables Associating route tables to subnets Custom vs main route tables Routing traffic between subnets and to the internet 3.8 VPC Peering VPC-to-VPC communication Creating and accepting peering connections Limitations and routing configuration 3.9 VPC Endpoints Interface vs Gateway endpoints Connecting privately to AWS services like S3 or DynamoDB Security benefits 3.10 Security in VPC Security Groups vs NACLs Inbound and outbound rules Stateful vs Stateless behavior Best practices for securing subnets and traffic flow 3.11 Elastic IPs and ENIs Allocating and associating Elastic IPs Attaching multiple ENIs (Elastic Network Interfaces) to an instance Use cases for secondary ENIs 3.12 Monitoring and Troubleshooting VPC Flow Logs CloudWatch metrics for networking Troubleshooting connectivity issues 3.13 VPC Design Best Practices Multi-AZ design Least privilege principle in security Using public and private subnets effectively High availability and fault tolerance 3.14 IPv6 Support in VPC Enabling IPv6 in a VPC Dual-stack networking (IPv4 + IPv6) Security considerations with IPv6 3.15 Hybrid Networking (Advanced) VPN connections AWS Direct Connect Transit Gateway overview Hybrid architecture design tips Optional Hands-On Tasks Create a custom VPC with 2 public and 2 private subnets Launch EC2 instances in both subnet types and test internet access Create and test a NAT Gateway Set up a VPC peering connection Use a VPC endpoint to connect to S3 privately Enable VPC Flow Logs and analyze traffic patterns",
    "tags": [],
    "title": "AWS VPC",
    "uri": "/part04/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [
      "ELB, Autoscaling"
    ],
    "title": "Route 53",
    "uri": "/part05/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [
      "ELB, Autoscaling"
    ],
    "title": "AWS Storage Services",
    "uri": "/part06/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [
      "ELB, Autoscaling"
    ],
    "title": "AWS RDS (Relational Database Service)",
    "uri": "/part07/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [
      "ELB, Autoscaling"
    ],
    "title": "AWS CloudFront",
    "uri": "/part08/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [
      "ELB, Autoscaling"
    ],
    "title": "AWS Lambda",
    "uri": "/part09/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [
      "ELB, Autoscaling"
    ],
    "title": " AWS ECS \u0026 EKS",
    "uri": "/part10/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "AWS Solutions Architect ‚Äì Professional Course Curriculum Lesson 00 ‚Äì Course Overview An introduction to the course objectives, structure, and exam preparation strategies. Understand the value of AWS architecture and the skills you will gain.\nüìò Sample Questions\nWhat are the main pillars of AWS architecture? How should you prepare for the AWS Solutions Architect ‚Äì Professional exam? üîó Learn More\nAWS Certification Overview Lesson 01 ‚Äì AWS Overview Learn the basics of AWS cloud computing, global infrastructure, core services, and deployment models. Understand how AWS helps build scalable and secure applications.\nüìò Sample Questions\nExplain the AWS global infrastructure. What are the differences between regions and availability zones? üîó Learn More\nAWS Global Infrastructure Lesson 02 ‚Äì Designing Highly Available, Cost-efficient, Fault-tolerant, and Scalable Systems Explore architectural best practices to ensure applications are resilient, meet demand fluctuations, and optimize costs while maintaining performance and reliability.\nüìò Sample Questions\nWhat design patterns enhance fault tolerance? How can you reduce costs while ensuring scalability? üîó Learn More\nAWS Well-Architected Framework Lesson 03 ‚Äì Identity Access Management (IAM) Dive deep into user authentication, role-based access, policies, permissions, and security mechanisms. Learn how to manage identities securely within AWS.\nüìò Sample Questions\nWhat is the difference between IAM roles and policies? How do you implement least privilege access? üîó Learn More\nIAM Best Practices Lesson 04 ‚Äì Amazon Virtual Private Cloud (VPC) Learn to create and configure private networks, subnets, route tables, gateways, and security groups for secure communication between resources.\nüìò Sample Questions\nHow would you secure traffic between EC2 instances? What are NAT gateways and why are they used? üîó Learn More\nAmazon VPC Documentation Lesson 05 ‚Äì Elastic Compute Cloud (EC2) Understand how to launch, configure, and manage virtual servers in AWS. Learn about instance types, auto scaling, placement groups, and networking.\nüìò Sample Questions\nWhat are EC2 instance types and how are they categorized? How do auto scaling groups work? üîó Learn More\nAmazon EC2 User Guide Lesson 06 ‚Äì Amazon Simple Storage Service (S3) Explore object storage architecture, data lifecycle, versioning, encryption, and cross-region replication to build reliable and scalable storage solutions.\nüìò Sample Questions\nHow do you implement encryption at rest and in transit for S3? What is the purpose of lifecycle rules in S3? üîó Learn More\nAmazon S3 Documentation Lesson 07 ‚Äì Amazon Route 53 Learn domain name system (DNS) management, routing policies, health checks, and high availability configurations for managing domain-based traffic.\nüìò Sample Questions\nWhat are routing policies and when would you use each one? How does Route 53 support high availability? üîó Learn More\nAmazon Route 53 Documentation Lesson 08 ‚Äì Databases Understand managed database services like RDS, DynamoDB, and Aurora. Learn database migration, scaling, indexing, and caching strategies.\nüìò Sample Questions\nWhat are the benefits of using Aurora over traditional RDS? How does DynamoDB handle scalability? üîó Learn More\nAWS Database Services Lesson 09 ‚Äì Application Services Get familiar with messaging, queuing, notification services such as SQS, SNS, and EventBridge. Explore how to build loosely coupled and event-driven architectures.\nüìò Sample Questions\nWhen would you use SQS vs SNS? How can EventBridge integrate with microservices? üîó Learn More\nAWS Application Integration Lesson 10 ‚Äì Security Practices for Optimum Cloud Deployment Learn about securing data, controlling access, implementing encryption, audit trails, and governance. Best practices for safeguarding cloud applications.\nüìò Sample Questions\nHow do you configure encryption in transit and at rest? What steps are necessary for ensuring compliance? üîó Learn More\nAWS Security Best Practices Lesson 11 ‚Äì Disaster Recovery Understand backup strategies, replication across regions, failover planning, and recovery objectives to ensure business continuity during failures.\nüìò Sample Questions\nWhat is the difference between RPO and RTO? How would you design a cross-region disaster recovery solution? üîó Learn More\nAWS Disaster Recovery Solutions Lesson 12 ‚Äì Troubleshooting Explore common operational issues, monitoring logs, diagnosing performance bottlenecks, and debugging resource configurations to maintain uptime.\nüìò Sample Questions\nHow do you troubleshoot instance startup failures? What monitoring tools can you use to diagnose problems? üîó Learn More\nAWS CloudWatch Documentation Lesson 13 ‚Äì AWS Solutions Architect Exam Prepare for the certification exam with practice questions, scenario-based problems, time management tips, and strategies for tackling complex architecture challenges.\nüìò Sample Questions\nExplain a scenario-based question where you must choose between high availability and cost optimization. How do you prioritize security in an application design? üîó Learn More\nAWS Certification Preparation",
    "description": "AWS Solutions Architect ‚Äì Professional Course Curriculum Lesson 00 ‚Äì Course Overview An introduction to the course objectives, structure, and exam preparation strategies. Understand the value of AWS architecture and the skills you will gain.\nüìò Sample Questions\nWhat are the main pillars of AWS architecture? How should you prepare for the AWS Solutions Architect ‚Äì Professional exam? üîó Learn More\nAWS Certification Overview Lesson 01 ‚Äì AWS Overview Learn the basics of AWS cloud computing, global infrastructure, core services, and deployment models. Understand how AWS helps build scalable and secure applications.",
    "tags": [],
    "title": "AWS Imp Link",
    "uri": "/projects-tasks/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Please connect at 2pm by clicking here Recording Link **Table of Contents**\r0. Introduction to AWS Cloud 0.1 What is AWS Cloud? 0.2 History and Evolution of AWS 0.3 AWS Global Infrastructure 0.4 Core AWS Services 0.5 Benefits of AWS Cloud 0.6 Use Cases for AWS Cloud 0.7 How AWS Differs from Other Cloud Providers 0.8 Getting Started with AWS 0.9 Common AWS Terminology 1. AWS IAM (Identity and Access Management) 1.1 Introduction to IAM 1.2 Creating Users, Groups, and Roles 1.3 Managing Permissions with Policies 1.4 IAM Best Practices 2. AWS EC2 (Elastic Compute Cloud) 2.1 Introduction to EC2 2.2 Launching EC2 Instances 2.3 EC2 Instance Types 2.4 Elastic IP and Security Groups 2.5 EC2 Auto Scaling 3. AWS VPC (Virtual Private Cloud) 3.1 VPC Overview 3.2 VPC Subnets 3.3 Internet Gateway and NAT Gateway 3.4 VPC Peering and Transit Gateway 3.5 Security with VPC - NACLs and Security Groups 4. AWS Route 53, Load Balancers, and Auto Scaling 4.1 Route 53 Overview 4.2 DNS Management in Route 53 4.3 Creating and Configuring Load Balancers 4.3.1 Classic Load Balancer 4.3.2 Application Load Balancer 4.3.3 Network Load Balancer 4.4 AWS Auto Scaling 4.4.1 Auto Scaling Groups 4.4.2 Scaling Policies 5. AWS Storage Services 5.1 Overview of AWS Storage Services 5.2 Amazon S3 (Simple Storage Service) 5.3 Amazon EBS (Elastic Block Store) 5.4 Amazon EFS (Elastic File System) 5.5 AWS Glacier 5.6 Storage Gateway 6. AWS RDS (Relational Database Service) 6.1 RDS Overview 6.2 Supported Database Engines 6.3 Deploying RDS Instances 6.4 Backup and Recovery in RDS 6.5 RDS Performance Optimization 6.6 Security for RDS 7. AWS CloudFront 7.1 Introduction to CloudFront 7.2 Setting up a CloudFront Distribution 7.3 Cache Behavior and Origins 7.4 CloudFront Security 8. AWS Lambda 8.1 Introduction to Lambda 8.2 Creating Lambda Functions 8.3 Triggers and Event Sources 8.4 Managing Lambda Functions 9. AWS DynamoDB 9.1 Introduction to DynamoDB 9.2 Creating Tables and Indexes 9.3 DynamoDB Data Modeling 9.4 Working with DynamoDB Streams 9.5 DynamoDB Best Practices 10. AWS ECS (Elastic Container Service) or EKS (Elastic Kubernetes Service) 10.1 ECS Overview 10.2 ECS Cluster and Task Definitions 10.3 ECS Service and Auto Scaling 10.4 EKS Overview 10.5 Deploying Kubernetes on AWS 10.6 EKS Cluster Management 11. AWS Projects 11.1 Project 1: Building a Scalable Web Application 11.2 Project 2: Serverless API with Lambda and DynamoDB 11.3 Project 3: E-commerce Platform with EC2, RDS, and CloudFront 11.4 Project 4: Real-time Data Processing with Kinesis and Lambda 11.5 Project 5: Multi-tier Application with VPC, Load Balancer, and Auto Scaling",
    "description": "Please connect at 2pm by clicking here Recording Link **Table of Contents**\r0. Introduction to AWS Cloud 0.1 What is AWS Cloud? 0.2 History and Evolution of AWS 0.3 AWS Global Infrastructure 0.4 Core AWS Services 0.5 Benefits of AWS Cloud 0.6 Use Cases for AWS Cloud 0.7 How AWS Differs from Other Cloud Providers 0.8 Getting Started with AWS 0.9 Common AWS Terminology 1. AWS IAM (Identity and Access Management) 1.1 Introduction to IAM 1.2 Creating Users, Groups, and Roles 1.3 Managing Permissions with Policies 1.4 IAM Best Practices 2. AWS EC2 (Elastic Compute Cloud) 2.1 Introduction to EC2 2.2 Launching EC2 Instances 2.3 EC2 Instance Types 2.4 Elastic IP and Security Groups 2.5 EC2 Auto Scaling 3. AWS VPC (Virtual Private Cloud) 3.1 VPC Overview 3.2 VPC Subnets 3.3 Internet Gateway and NAT Gateway 3.4 VPC Peering and Transit Gateway 3.5 Security with VPC - NACLs and Security Groups 4. AWS Route 53, Load Balancers, and Auto Scaling 4.1 Route 53 Overview 4.2 DNS Management in Route 53 4.3 Creating and Configuring Load Balancers 4.3.1 Classic Load Balancer 4.3.2 Application Load Balancer 4.3.3 Network Load Balancer 4.4 AWS Auto Scaling 4.4.1 Auto Scaling Groups 4.4.2 Scaling Policies 5. AWS Storage Services 5.1 Overview of AWS Storage Services 5.2 Amazon S3 (Simple Storage Service) 5.3 Amazon EBS (Elastic Block Store) 5.4 Amazon EFS (Elastic File System) 5.5 AWS Glacier 5.6 Storage Gateway 6. AWS RDS (Relational Database Service) 6.1 RDS Overview 6.2 Supported Database Engines 6.3 Deploying RDS Instances 6.4 Backup and Recovery in RDS 6.5 RDS Performance Optimization 6.6 Security for RDS 7. AWS CloudFront 7.1 Introduction to CloudFront 7.2 Setting up a CloudFront Distribution 7.3 Cache Behavior and Origins 7.4 CloudFront Security 8. AWS Lambda 8.1 Introduction to Lambda 8.2 Creating Lambda Functions 8.3 Triggers and Event Sources 8.4 Managing Lambda Functions 9. AWS DynamoDB 9.1 Introduction to DynamoDB 9.2 Creating Tables and Indexes 9.3 DynamoDB Data Modeling 9.4 Working with DynamoDB Streams 9.5 DynamoDB Best Practices 10. AWS ECS (Elastic Container Service) or EKS (Elastic Kubernetes Service) 10.1 ECS Overview 10.2 ECS Cluster and Task Definitions 10.3 ECS Service and Auto Scaling 10.4 EKS Overview 10.5 Deploying Kubernetes on AWS 10.6 EKS Cluster Management 11. AWS Projects 11.1 Project 1: Building a Scalable Web Application 11.2 Project 2: Serverless API with Lambda and DynamoDB 11.3 Project 3: E-commerce Platform with EC2, RDS, and CloudFront 11.4 Project 4: Real-time Data Processing with Kinesis and Lambda 11.5 Project 5: Multi-tier Application with VPC, Load Balancer, and Auto Scaling",
    "tags": [],
    "title": "AWS Certified Solutions Architect - Professional",
    "uri": "/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional¬†\u003e¬†Tags",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tag :: ELB, Autoscaling",
    "uri": "/tags/elb-autoscaling/index.html"
  },
  {
    "breadcrumb": "AWS Certified Solutions Architect - Professional",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
