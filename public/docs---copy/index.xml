<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Docs :: My Doc</title>
    <link>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Helm Contents</title>
      <link>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/toc/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/toc/index.html</guid>
      <description>📌 Introduction to Helm What is Helm? Why use Helm for Kubernetes application deployment? Key components: Charts, Repositories, Releases 📚 Exploring the Official Helm Documentation Navigating helm.sh/docs Installation and prerequisites Understanding the Helm CLI and commands Helm 3 vs Helm 2 (brief overview) 🧩 Working with Existing Helm Charts 🔍 Discovering and Using Helm Repositories Adding public and private chart repositories Searching for charts (helm search hub vs helm search repo) Repository management commands 🚀 Deploying a Helm Release Installing a chart as a release Setting a namespace for the deployment Dry run and debug before actual deployment ⚙️ Customizing Charts with Values Understanding values.yaml Overriding values using: Custom values.yaml files --set CLI option --set-file and --set-string 🔁 Managing Helm Releases Upgrading a release with updated values or chart versions Rolling back to a previous release version Viewing and diffing historical release versions Uninstalling a release cleanly 🌐 Multi-Environment Helm Usage Structuring values for different environments (dev, staging, prod) Folder-based environment separation Using --values with multiple files for environment-specific configs 🛠️ Creating Your Own Helm Charts ⚡ Helm Chart Quick Start helm create mychart Directory structure explained Modifying the default template 🧬 Helm Template Engine and Syntax How Helm renders templates Using {{ .Values }}, {{ .Chart }}, {{ .Release }} objects 🏗 Built-in Objects and Functions Overview of available Helm objects Useful template functions (include, required, lookup, toYaml, etc.) Best practices in chart templating 🧪 Testing and Validating Charts helm lint and template validation Using helm template for local rendering Unit testing templates with tools like helm-unittest 🧰 Troubleshooting and Tips Debugging with --debug and --dry-run Common errors and how to fix them Checking logs and Helm release history Understanding exit codes and command output</description>
    </item>
    <item>
      <title>Session 1: Introduction to Helm</title>
      <link>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/session01/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/session01/index.html</guid>
      <description>📦 Session 1: Introduction to Helm Helm is the package manager for Kubernetes, designed to simplify deployment, configuration, and lifecycle management of Kubernetes applications using reusable packages called charts.&#xA;⚙️ Prerequisites Before using Helm, ensure the following:&#xA;✅ A working Kubernetes cluster ✅ kubectl configured to access the cluster ✅ Helm CLI installed on your local system 🔧 Install Helm curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash&#xD;🧩 Verify Helm Installation helm version&#xD;🌐 How Helm Connects to Kubernetes Helm does not need a server component (like Tiller in v2). It uses:</description>
    </item>
    <item>
      <title>Session 2: Creating and Hosting Custom Helm Charts</title>
      <link>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/session02/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/session02/index.html</guid>
      <description>🎯 Session 2: Creating and Hosting Custom Helm Charts In this session, you’ll learn to:&#xA;✅ Create your own Helm charts from scratch ✅ Customize templates and use values effectively ✅ Understand and use _helpers.tpl ✅ Host charts on GitHub as a Helm repository ✅ Apply real-world scenarios (Ingress, ConfigMap, HPA) 🛠️ Step 1: Create a Custom Chart helm create nginx-demo cd nginx-demo&#xD;This creates the following structure:&#xA;nginx-demo/ ├── charts/ ├── Chart.yaml ├── templates/ │ ├── deployment.yaml │ ├── _helpers.tpl │ ├── hpa.yaml │ ├── ingress.yaml │ ├── service.yaml │ ├── configmap.yaml │ └── tests/ └── values.yaml&#xD;📄 What is _helpers.tpl? _helpers.tpl is a special file used to define reusable template snippets using Go’s template syntax. It’s where you can define helper functions like naming conventions or labels, which you can include in other templates using {{ include &#34;name&#34; . }}.</description>
    </item>
    <item>
      <title>Helm Functions</title>
      <link>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/helmfunctions/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/helmfunctions/index.html</guid>
      <description>Template Functions and Pipelines&#xA;🧭 Helm Template Functions Cheat Sheet with Examples This document provides a comprehensive list of Helm template functions used in Helm charts, with real-world examples using .Values, .Chart, and .Release.&#xA;🔧 Commonly Used Functions 🗝️ default – Provide a fallback value replicaCount: {{ .Values.replicaCount | default 3 }}&#xD;If .Values.replicaCount is not set in values.yaml, it defaults to 3.&#xA;❗ required – Make a value mandatory apiVersion: v1 kind: Secret metadata: name: my-secret data: password: {{ required &#34;A password is required!&#34; .Values.password | b64enc }}&#xD;apiVersion: v1 kind: Secret metadata: name: my-secret data: {{- if .Values.password }} password: {{ .Values.password | b64enc | quote }} {{- else }} password: &#34;&#34; {{- end }}&#xD;Will throw an error at install/upgrade if password is not provided.</description>
    </item>
    <item>
      <title>Additional</title>
      <link>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/additional/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/nirpendra.kumar/mypersonal-doc.git/docs---copy/additional/index.html</guid>
      <description>🔍 Preview Manifests Before Installing To preview the rendered Kubernetes manifests from a Helm chart without installing it, use:&#xA;helm template &lt;release-name&gt; &lt;chart-path-or-name&gt;&#xD;Example: helm template my-nginx bitnami/nginx&#xD;🧪 Simulate Installation (Dry Run) To simulate an install with all validations (including custom values):&#xA;helm install &lt;release-name&gt; &lt;chart-path-or-name&gt; --dry-run --debug&#xD;Example: helm install my-nginx bitnami/nginx --dry-run --debug&#xD;📥 Get Values from Existing Release To retrieve the custom values used in an existing Helm release:</description>
    </item>
  </channel>
</rss>